import pygame
import random

# Pygame 초기화
pygame.init()

# 화면 설정
화면_가로 = 300
화면_세로 = 600
화면 = pygame.display.set_mode((화면_가로, 화면_세로))
pygame.display.set_caption("간단한 테트리스")

# 색깔 정의
검은색 = (0, 0, 0)
흰색 = (255, 255, 255)
파란색 = (0, 0, 255)
노란색 = (255, 255, 0)
초록색 = (0, 255, 0)
빨간색 = (255, 0, 0)

# 테트리스 블록 모양 정의
블록_모양 = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]]
]

# 블록 색깔 정의
블록_색깔 = [흰색, 파란색, 노란색, 초록색, 빨간색]

# 게임 변수 초기화
블록_가로 = 10
블록_세로 = 20
블록_크기 = 30
게임_맵 = [[0] * 블록_가로 for _ in range(블록_세로)]
현재_블록 = None
현재_블록_색깔 = None
현재_블록_회전 = 0
현재_블록_위치 = [0, 0]
블록_낙하_시간 = 500
시간_지연 = 0

# 블록 생성 함수
def 새로운_블록():
    global 현재_블록, 현재_블록_색깔, 현재_블록_회전, 현재_블록_위치

    현재_블록 = random.choice(블록_모양)
    현재_블록_색깔 = random.choice(블록_색깔)
    현재_블록_회전 = 0
    현재_블록_위치 = [블록_가로 // 2 - len(현재_블록[0]) // 2, 0]

# 충돌 검사 함수
def 충돌_검사(x_offset=0, y_offset=0, 회전=0):
    for i in range(len(현재_블록)):
        for j in range(len(현재_블록[0])):
            if 현재_블록[i][j] != 0:
                x = 현재_블록_위치[0] + j + x_offset
                y = 현재_블록_위치[1] + i + y_offset

                if x < 0 or x >= 블록_가로 or y >= 블록_세로:
                    return True  # 벽에 닿음
                if y >= 0 and 게임_맵[y][x] != 0:
                    return True  # 다른 블록과 겹침
    return False

# 블록 회전 함수
def 블록_회전():
    global 현재_블록, 현재_블록_회전
    이전_블록 = 현재_블록
    이전_회전 = 현재_블록_회전
    현재_블록 = 블록_모양[현재_블록_회전]
    현재_블록_회전 = (현재_블록_회전 + 1) % len(블록_모양[현재_블록_회전])
    if 충돌_검사(회전=현재_블록_회전):
        현재_블록 = 이전_블록
        현재_블록_회전 = 이전_회전

# 블록 이동 함수
def 블록_이동(x, y):
    global 현재_블록_위치
    if not 충돌_검사(x_offset=x, y_offset=y):
        현재_블록_위치[0] += x
        현재_블록_위치[1] += y
    else:
        블록_고정화()

# 블록 고정화 함수
def 블록_고정화():
    global 게임_맵, 현재_블록_위치, 현재_블록, 현재_블록_색깔
    for i in range(len(현재_블록)):
        for j in range(len(현재_블록[0])):
            if 현재_블록[i][j] != 0:
                x = 현재_블록_위치[0] + j
                y = 현재_블록_위치[1] + i
                게임_맵[y][x] = 현재_블록_색깔

    새로운_블록()

# 줄 삭제 함수
def 줄_삭제():
    global 게임_맵
    삭제된_줄 = 0
    for i in range(블록_세로):
        if all(게임_맵[i]):
            del 게임_맵[i]
            게임_맵.insert(0, [0] * 블록_가로)
            삭제된_줄 += 1
    return 삭제된_
